default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"

  lane :build do
    case git_branch
    when "develop"
      develop
    when "master"
      master
    end
  end

  lane :develop do
    backupData
    messageSlack(
  		message: "Build de la version : " + get_version_number,
  	)
  end

  lane :master do
    #backupData

    addCarthage

    devices

    version_bump_podspec(path: "TestTabBarLibrary.podspec", bump_type: "patch")

    version = version_get_podspec(path: "TestTabBarLibrary.podspec")
    set_github_release(
      repository_name: "lukile/TestTabBarLibrary",
      api_token: ENV["TOKEN"],
      name: "Release " + version,
      tag_name: version,
      is_prerelease: true,
      description: "This release's description Test",
      commitish: "master"
    )

    pod_push(path: "TestTabBarLibrary.podspec")

  	messageSlack(message: "Test release")
  end

  # Change destination backup file
  lane :changePlaceFile do |options|
    if options[:file].to_s.empty?
      UI.user_error!("file is nil or empty")
    else
      file = options[:file] + ".back"
      "cp #{file} ../fastlane/backup"
      puts "File copied"
      "m #{file}"
      puts "Old file deleted"
    end
  end

  lane :addCarthage do
    carthage(
      use_ssh: false,   # Use SSH for downloading GitHub repositories.
      use_submodules: false,      # Add dependencies as Git submodules.
      use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist
      no_build: false,  # When bootstrapping Carthage do not build
      no_skip_current: false,     # Don't skip building the current project (only for frameworks)
      verbose: false,   # Print xcodebuild output inline
      platform: "iOS",  # Define which platform to build for (one of ‘all’, ‘Mac’, ‘iOS’, ‘watchOS’, ‘tvOS‘, or comma-separated values of the formers except for ‘all’)
      configuration: "Release",   # Build configuration to use when building
      cache_builds: true,         # By default Carthage will rebuild a dependency regardless of whether its the same resolved version as before.
      toolchain: "com.apple.dt.toolchain.Swift_2_3",  # Specify the
      new_resolver: false,        # Use the new resolver to resolve depdendency graph
    )
    messageSlack(
  		message: "Carthage pass"
  	)
  end

  # backup file in backup folder
  lane :backupData do
    arrayFiles = ["TestTabBar/TabBar.swift", "TestTabBar/Position.swift", "TestTabBarTests/TestTabBarTests.swift"]
    for file in arrayFiles do
      ENV["BUNDLE_TESTS_FILES"] = File.expand_path("../" + file)
      backup_file(
        path: ENV["BUNDLE_TESTS_FILES"]
      )
      puts "FILE >>> " + ENV["BUNDLE_TESTS_FILES"]
      changePlaceFile(file: ENV["BUNDLE_TESTS_FILES"])
    end
    messageSlack(message: "Test backup file",channel: "#backup")
  end

  # test file test in devices
  lane :devices do
    run_tests(
      scheme: "TestTabBar",
      devices: ["iPhone XR", "iPhone XS"],
      clean: true,
    )
    messageSlack(message: "Test devices", channel: "#devices")
  end

  # send slack message
  lane :messageSlack do |options|
    choiceChannel = (options[:channel] == "") ? "#general" : options[:channel]
    slack(
      message: options[:message],
      slack_url: "https://hooks.slack.com/services/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",
      channel: choiceChannel
    )
  end
end
